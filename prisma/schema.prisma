// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String   @unique
  password_hash String
  profileId     Int      @unique
  profile       Profile  @relation(fields: [profileId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Profile {
  id                    Int            @id @default(autoincrement())
  address               String?
  age                   Int?
  profileImage          String?
  backgroundImage       String?
  host                  Boolean        @default(false)
  longitude             Float?
  latitude              Float?
  city                  String?
  bio                   String?
  rules                 String[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  user                  User?
  conversationsCreated  Conversation[] @relation("ConversationCreated")
  conversationsReceived Conversation[] @relation("ConversationReceived")
  sentMessages          Message[]      @relation("sender")
  receivedMessages      Message[]      @relation("receiver")
  receivedRequest       Request[]      @relation("from")
  sentRequest           Request[]      @relation("to")
}

model Request {
  fromId Int
  toId   Int
  from   Profile @relation("from", fields: [fromId], references: [id])
  to     Profile @relation("to", fields: [toId], references: [id])

  accepted Boolean @default(false)

  createdAt DateTime @default(now())

  @@id([fromId, toId])
}

model Conversation {
  messages Message[]

  createdAt     DateTime @default(now())
  lastMessage   String?
  lastMessageAt DateTime @default(now())

  profile1Id Int
  profile2Id Int

  profile1 Profile? @relation("ConversationCreated", fields: [profile1Id], references: [id])
  profile2 Profile? @relation("ConversationReceived", fields: [profile2Id], references: [id])

  @@id([profile1Id, profile2Id])
}

model Message {
  id Int @id @default(autoincrement())

  body      String?
  image     String?
  createdAt DateTime @default(now())

  senderId   Int
  receiverId Int

  sender   Profile @relation("sender", fields: [senderId], references: [id])
  receiver Profile @relation("receiver", fields: [receiverId], references: [id])

  conversationId Int
  Conversation   Conversation? @relation(fields: [senderId, receiverId], references: [profile1Id, profile2Id])
}
